
CRM开始
知识点：

1.基于limit_choice_to 关联FK或M2M进行筛选
class ClassList(models.Model):
    """
    班级表
    如：
        Python全栈  面授班  5期  10000  2017-11-11  2018-5-11
    """
    school = models.ForeignKey(verbose_name='校区', to='School')
    course = models.ForeignKey(verbose_name='课程名称', to='Course')
    semester = models.PositiveIntegerField(verbose_name="班级(期)")
    price = models.PositiveIntegerField(verbose_name="学费")
    start_date = models.DateField(verbose_name="开班日期")
    graduate_date = models.DateField(verbose_name="结业日期", null=True, blank=True)
    class_teacher = models.ForeignKey(verbose_name='班主任', to='UserInfo', related_name='classes',limit_choices_to={'depart__title':'教质部'})
    tech_teachers = models.ManyToManyField(verbose_name='任课老师', to='UserInfo', related_name='teach_classes', blank=True,
                                           limit_choices_to={'depart__title__in':['Linux教学部','Python教学部']})
    memo = models.TextField(verbose_name='说明',max_length=255, blank=True, null=True)

    def __str__(self):
        return "{0}({1}期)".format(self.course.name, self.semester)



2.自关联

class Customer(models.Model):
    """
    客户表
    """
    referral_from = models.ForeignKey(
        'self',
        blank=True,
        null=True,
        verbose_name="转介绍自学员",
        help_text="若此客户是转介绍自内部学员,请在此处选择内部学员姓名",
        related_name="internal_referral"
    )



3.跟进记录
扩展，这里就可以用来做资产的使用人，借用时间等的跟进记录
class ConsultRecord(models.Model):
    """
    客户跟进记录
    """
    customer = models.ForeignKey(verbose_name="所咨询客户", to='Customer')
    consultant = models.ForeignKey(verbose_name="跟踪人", to='UserInfo')
    note = models.TextField(verbose_name="跟进内容")
    date = models.DateField(verbose_name="跟进日期", auto_now_add=True)



4.锁表
with transaction.atomic(): # 事务
    # 在数据库中加锁
    # 防止多个用户同时提交一个相同的客户到自己的私户
    origin_queryser = models.Customer.objects.filter(id__in=pk_list,status=2,consultant__isnull=True).select_for_update()
    if len(origin_queryser) == len(pk_list):
        models.Customer.objects.filter(id__in=pk_list, status=2, consultant__isnull=True).update(consultant_id=current_user_id)
        flag = True
    if not flag:
        return HttpResponse('手速太慢了，选中的客户已被其他人申请走')


5.modelformset_factory  批量操作
    def attendance_view(self, request, course_record_id, *args, **kwargs):
        '''
        考勤记录的批量操作
        :param request:
        :param course_record_id:
        :param args:
        :param kwargs:
        :return:
        '''
        study_record_object_list = models.StudyRecord.objects.filter(course_record_id=course_record_id)
        study_model_formset = modelformset_factory(models.StudyRecord,form=StudyRecordModelForm,extra=0 )


        if request.method == 'POST':
            formset = study_model_formset(queryset=study_record_object_list, data=request.POST)
            if formset.is_valid():
                formset.save()
            return render(request, 'attendance.html', {'formset': formset})

        formset = study_model_formset(queryset=study_record_object_list)

        return render(request,'attendance.html',{'formset':formset})


    {% for form in formset %}
        <tr>
            {{ form.id }}       <!--必须要，指的该行的ID，不然会报错 "form-0-id" -->
            <td>{{ form.instance.student }}</td>
            <td>{{ form.instance.course_record.date |date:'Y/m/d'}}</td>
            <td>{{ form.record }} <span style="color: red">{{ form.record.errors.0 }}</span></td>
        </tr>
    {% endfor %}