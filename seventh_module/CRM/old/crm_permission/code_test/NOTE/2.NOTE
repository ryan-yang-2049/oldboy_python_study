
内容回顾：
    1.继承关系


内容：stark 统一增删改查 curd
    1.方法和函数的区别？
    def func():
	pass

    class Foo(object):

        def display(self):
            pass

    obj = Foo()
    from types import MethodType,FunctionType
    def check(arg):
        """
        判断 arg是函数则打印1 ，arg是方法则打印2
        :param arg:
        :return:
        """

        if isinstance(arg,MethodType):
            print(2,"我是方法")
        elif isinstance(arg,FunctionType):
            print(1,"我是函数")
        else:
            print("不认识")
    check(func)
    check(Foo.display)
    check(obj.display)


    2. yield (节省内存开支)
        #浪费内存的写法
            def func(request):
                result = []
                data_list = models.Users.object.all()
                for row in data_list:
                    temp = "%s%s"%(row.name,row.pwd)
                    result.append(temp)
                return render(request,'xxx.html',locals())

            #xxx.html
            {% for row in reslut%}
                {{row}}
            {%endfor%}
        #优化版(yield 生成器)
            def get_result(data_list):
                for row in data_list:
                    temp = "%s%s"%(row.name,row.pwd)
                    yield temp
            def func(request):
                data_list = models.Users.object.all()
                result = get_result(data_list)
                return render(request,'xxx.html',locals())

            #xxx.html
            {% for row in reslut%}
                {{row}}
            {%endfor%}
            #当 xxx.html 里面for一条，那么就会在后台里面利用生成一条，旧的数据就会被python的垃圾回收机制给回收掉，就不浪费内存。



    3. 反射 getattr
        def test(request):
            from app01 import models

            list_display = ['title']        # 自定义页面显示的列
            header_list = []
            for name in list_display:

                header_list.append(models.UserInfo._meta.get_field('title').verbose_name)
            print(header_list)
            user_queryset = models.UserInfo.objects.all()
            for item in user_queryset:
                row = []
                for field in list_display:
                    row.append(getattr(item,field))
                print(row)
            return HttpResponse(".....")

    3.5 装饰器
        def wrapper(func)
            def inner(*args,**kwargs):
                return func(*args,**kwargs)
            return inner

        @wrapper
        def func():
            pass


    4. 开始增删改查的开发


    5. 保留原搜索条件

