1. 将rbac组件拷贝项目。
 
2. 将rbac/migrations目录中的数据库迁移记录删除
 
 
3. 业务系统中用户表结构的设计
	3.1 在业务表中通过One2One将用户表拆分到两张表中，如：
		 rbac/models.py
        class UserInfo(models.Model):
            # 用户表
            name = models.CharField(verbose_name='用户名', max_length=32)
            password = models.CharField(verbose_name='密码', max_length=64)
            email = models.CharField(verbose_name='邮箱', max_length=32)
            roles = models.ManyToManyField(verbose_name='拥有的所有角色', to=Role, blank=True) #严重提醒 Role 不要加引号
 
            def __str__(self):
                return self.name
	 
		业务/models.py
			class UserInfo(RbacUserInfo):
				user = models.OneToOneField(verbose_name='用户',max_length=32)
				phone = models.CharField(verbose_name='联系方式', max_length=32)
				level_choices = (
					(1, 'T1'),
					(2, 'T2'),
					(3, 'T3'),
				)
				level = models.IntegerField(verbose_name='级别', choices=level_choices)
				depart = models.ForeignKey(verbose_name='部门', to='Department')
 
		缺点：用户表数据分散（两张表中）
		优点：直接使用，利用上rbac的用户管理功能
		
 
    3.2 业务表结构中的用户表需要和rbac中的用户有继承关系，如：
 
		rbac/models.py
			class UserInfo(models.Model):
				# 用户表
				name = models.CharField(verbose_name='用户名', max_length=32)
				password = models.CharField(verbose_name='密码', max_length=64)
				email = models.CharField(verbose_name='邮箱', max_length=32)
				roles = models.ManyToManyField(verbose_name='拥有的所有角色', to=Role, blank=True) 严重提醒 Role 不要加引号
	 
				def __str__(self):
					return self.name
	 
				class Meta:
					# django以后再做数据库迁移时，不再为UserInfo类创建相关的表以及表结构了。
					# 此类可以当做"父类"，被其他Model类继承。
					abstract = True
	 
		业务/models.py
			class UserInfo(RbacUserInfo):
				phone = models.CharField(verbose_name='联系方式', max_length=32)
				level_choices = (
					(1, 'T1'),
					(2, 'T2'),
					(3, 'T3'),
				)
				level = models.IntegerField(verbose_name='级别', choices=level_choices)
	 
				depart = models.ForeignKey(verbose_name='部门', to='Department')
 
4. 讲业务系统中的用户表的路径写到配置文件。
	在settings.py中
	# 业务中的用户表
	RBAC_USER_MODLE_CLASS = "app01.models.UserInfo"
	
	然后在menu.py中去调用：
		from django.conf import settings
		from django.utils.module_loading import import_string
		# 业务中的用户表 "app01.models.UserInfo""
		user_model_class = import_string(settings.RBAC_USER_MODLE_CLASS)
		user_object = user_model_class.objects.filter(id=user_id).first()	
		
    用于在rbac分配权限时，读取业务表中的用户信息。
	
	
5.注释掉rbac/urls.py中关于用户操作的url
	# url(r'^user/list/$', user.user_list, name='user_list'),
    # url(r'^user/add/$', user.user_add, name='user_add'),
    # url(r'^user/edit/(?P<pk>\d+)/$', user.user_edit, name='user_edit'),  # rbac:user_edit
    # url(r'^user/del/(?P<pk>\d+)/$', user.user_del, name='user_del'),
    # url(r'^user/reset/password/(?P<pk>\d+)/$', user.user_reset_pwd, name='user_reset_pwd'),
	
	
	
6.如果要使用rbac中的模板，则需要将模板中的  导航条 + 菜单  去掉。当业务开发完成以后，在添加回来
	{% multi_menu request %}
	{% breadcrumb request %}
	

7.编写业务功能时，出现大量的拷贝
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	