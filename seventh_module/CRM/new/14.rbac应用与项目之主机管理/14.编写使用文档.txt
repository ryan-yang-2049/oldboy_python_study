1. 将rbac组件拷贝项目。
 
 
2. 将rbac/migrations目录中的数据库迁移记录删除
 
 
3. 业务系统中用户表结构的设计
 
    业务表结构中的用户表需要和rbac中的用户有继承关系，如：
 
    rbac/models.py
        class UserInfo(models.Model):
            # 用户表
            name = models.CharField(verbose_name='用户名', max_length=32)
            password = models.CharField(verbose_name='密码', max_length=64)
            email = models.CharField(verbose_name='邮箱', max_length=32)
            roles = models.ManyToManyField(verbose_name='拥有的所有角色', to=Role, blank=True) 严重提醒 Role 不要加引号
 
            def __str__(self):
                return self.name
 
            class Meta:
                # django以后再做数据库迁移时，不再为UserInfo类创建相关的表以及表结构了。
                # 此类可以当做"父类"，被其他Model类继承。
                abstract = True
 
    业务/models.py
        class UserInfo(RbacUserInfo):
            phone = models.CharField(verbose_name='联系方式', max_length=32)
            level_choices = (
                (1, 'T1'),
                (2, 'T2'),
                (3, 'T3'),
            )
            level = models.IntegerField(verbose_name='级别', choices=level_choices)
 
            depart = models.ForeignKey(verbose_name='部门', to='Department')
 
4. 讲业务系统中的用户表的路径写到配置文件。
 
    # 业务中的用户表
    RBAC_USER_MODLE_CLASS = "app01.models.UserInfo"
 
    用于在rbac分配权限时，读取业务表中的用户信息。