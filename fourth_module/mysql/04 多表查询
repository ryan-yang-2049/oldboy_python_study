多表查询

建表：
drop table employee;
drop table department;

create table department(
id int,
name varchar(20)
);

create table employee(
id int primary key auto_increment,
name varchar(20),
sex enum('male','female') not null default 'male',
age int,
dep_id int
);

#插入数据
insert into department values
(200,'技术'),
(201,'人力资源'),
(202,'销售'),
(203,'运营');

insert into employee(name,sex,age,dep_id) values
('egon','male',18,200),
('alex','female',48,201),
('wupeiqi','male',38,201),
('yuanhao','female',28,202),
('liwenzhou','male',18,200),
('jingliyang','female',18,204)
;

简单查询
select * from department,employee;  #无意义

# 内连接: 按照on 条件只取两张表相同的部分，连接成一张虚拟的表。
select * from department,employee where department.id = employee.dep_id; #
select * from employee inner join department on department.id = employee._depid;   # 内连接，只取相同的部分。(交集)



#左连接：优先显示左表全部记录 left  join
select * from employee left join department on department.id = employee.dep_id;


#右连接：优先显示左右表全部记录 right join
select * from employee right join department on department.id = employee.dep_id;

# 全连接：把两个结合在一起，并把相同部分去重，然后显示全部内容。 union
select * from employee left join department on department.id = employee.dep_id
union
select * from employee right join department on department.id = employee.dep_id;



子查询

MariaDB [db1]> select * from employee where dep_id in (select  id from department where name in ('技术','销售'));
+----+-----------+--------+------+--------+
| id | name      | sex    | age  | dep_id |
+----+-----------+--------+------+--------+
|  1 | egon      | male   |   18 |    200 |
|  4 | yuanhao   | female |   28 |    202 |
|  5 | liwenzhou | male   |   18 |    200 |
+----+-----------+--------+------+--------+

查询平均年龄在25 岁以上的部门名

MariaDB [db1]> select  name from department where id in (select dep_id from employee group by dep_id having avg(age) > 25);
+--------------+
| name         |
+--------------+
| 人力资源     |
| 销售         |
+--------------+


查看技术部门员工的姓名
MariaDB [db1]> select name from employee where dep_id = (select id from department where name = '技术');
+-----------+
| name      |
+-----------+
| egon      |
| liwenzhou |
+-----------+

查看不足2人的部门名
select name from department where id in (
select dep_id from employee group by dep_id having count(id) < 2)
union
SELECT NAME FROM department where id not in (select distinct dep_id from employee);
+--------+
| name   |
+--------+
| 销售   |
| 运营   |
+--------+


提取部门人数为0 的部门名称
SELECT NAME FROM department where id not in (select distinct dep_id from employee);


select name from department where id in (
select dep_id from employee group by dep_id having count(id) < 2)
union
SELECT id FROM department where id not in (select distinct dep_id from employee);



exists
select * from employee  where exists (select id from department where id=200);





作业---导入数据：
==================================================================================================================================================================
/*
 数据导入：
 Navicat Premium Data Transfer

 Source Server         : localhost
 Source Server Type    : MySQL
 Source Server Version : 50624
 Source Host           : localhost
 Source Database       : sqlexam

 Target Server Type    : MySQL
 Target Server Version : 50624
 File Encoding         : utf-8

 Date: 10/21/2016 06:46:46 AM
*/

SET NAMES utf8;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
--  Table structure for `class`
-- ----------------------------
DROP TABLE IF EXISTS `class`;
CREATE TABLE `class` (
  `cid` int(11) NOT NULL AUTO_INCREMENT,
  `caption` varchar(32) NOT NULL,
  PRIMARY KEY (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `class`
-- ----------------------------
BEGIN;
INSERT INTO `class` VALUES ('1', '三年二班'), ('2', '三年三班'), ('3', '一年二班'), ('4', '二年九班');
COMMIT;

-- ----------------------------
--  Table structure for `course`
-- ----------------------------
DROP TABLE IF EXISTS `course`;
CREATE TABLE `course` (
  `cid` int(11) NOT NULL AUTO_INCREMENT,
  `cname` varchar(32) NOT NULL,
  `teacher_id` int(11) NOT NULL,
  PRIMARY KEY (`cid`),
  KEY `fk_course_teacher` (`teacher_id`),
  CONSTRAINT `fk_course_teacher` FOREIGN KEY (`teacher_id`) REFERENCES `teacher` (`tid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `course`
-- ----------------------------
BEGIN;
INSERT INTO `course` VALUES ('1', '生物', '1'), ('2', '物理', '2'), ('3', '体育', '3'), ('4', '美术', '2');
COMMIT;

-- ----------------------------
--  Table structure for `score`
-- ----------------------------
DROP TABLE IF EXISTS `score`;
CREATE TABLE `score` (
  `sid` int(11) NOT NULL AUTO_INCREMENT,
  `student_id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `num` int(11) NOT NULL,
  PRIMARY KEY (`sid`),
  KEY `fk_score_student` (`student_id`),
  KEY `fk_score_course` (`course_id`),
  CONSTRAINT `fk_score_course` FOREIGN KEY (`course_id`) REFERENCES `course` (`cid`),
  CONSTRAINT `fk_score_student` FOREIGN KEY (`student_id`) REFERENCES `student` (`sid`)
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `score`
-- ----------------------------
BEGIN;
INSERT INTO `score` VALUES ('1', '1', '1', '10'), ('2', '1', '2', '9'), ('5', '1', '4', '66'), ('6', '2', '1', '8'), ('8', '2', '3', '68'), ('9', '2', '4', '99'), ('10', '3', '1', '77'), ('11', '3', '2', '66'), ('12', '3', '3', '87'), ('13', '3', '4', '99'), ('14', '4', '1', '79'), ('15', '4', '2', '11'), ('16', '4', '3', '67'), ('17', '4', '4', '100'), ('18', '5', '1', '79'), ('19', '5', '2', '11'), ('20', '5', '3', '67'), ('21', '5', '4', '100'), ('22', '6', '1', '9'), ('23', '6', '2', '100'), ('24', '6', '3', '67'), ('25', '6', '4', '100'), ('26', '7', '1', '9'), ('27', '7', '2', '100'), ('28', '7', '3', '67'), ('29', '7', '4', '88'), ('30', '8', '1', '9'), ('31', '8', '2', '100'), ('32', '8', '3', '67'), ('33', '8', '4', '88'), ('34', '9', '1', '91'), ('35', '9', '2', '88'), ('36', '9', '3', '67'), ('37', '9', '4', '22'), ('38', '10', '1', '90'), ('39', '10', '2', '77'), ('40', '10', '3', '43'), ('41', '10', '4', '87'), ('42', '11', '1', '90'), ('43', '11', '2', '77'), ('44', '11', '3', '43'), ('45', '11', '4', '87'), ('46', '12', '1', '90'), ('47', '12', '2', '77'), ('48', '12', '3', '43'), ('49', '12', '4', '87'), ('52', '13', '3', '87');
COMMIT;

-- ----------------------------
--  Table structure for `student`
-- ----------------------------
DROP TABLE IF EXISTS `student`;
CREATE TABLE `student` (
  `sid` int(11) NOT NULL AUTO_INCREMENT,
  `gender` char(1) NOT NULL,
  `class_id` int(11) NOT NULL,
  `sname` varchar(32) NOT NULL,
  PRIMARY KEY (`sid`),
  KEY `fk_class` (`class_id`),
  CONSTRAINT `fk_class` FOREIGN KEY (`class_id`) REFERENCES `class` (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `student`
-- ----------------------------
BEGIN;
INSERT INTO `student` VALUES ('1', '男', '1', '理解'), ('2', '女', '1', '钢蛋'), ('3', '男', '1', '张三'), ('4', '男', '1', '张一'), ('5', '女', '1', '张二'), ('6', '男', '1', '张四'), ('7', '女', '2', '铁锤'), ('8', '男', '2', '李三'), ('9', '男', '2', '李一'), ('10', '女', '2', '李二'), ('11', '男', '2', '李四'), ('12', '女', '3', '如花'), ('13', '男', '3', '刘三'), ('14', '男', '3', '刘一'), ('15', '女', '3', '刘二'), ('16', '男', '3', '刘四');
COMMIT;

-- ----------------------------
--  Table structure for `teacher`
-- ----------------------------
DROP TABLE IF EXISTS `teacher`;
CREATE TABLE `teacher` (
  `tid` int(11) NOT NULL AUTO_INCREMENT,
  `tname` varchar(32) NOT NULL,
  PRIMARY KEY (`tid`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `teacher`
-- ----------------------------
BEGIN;
INSERT INTO `teacher` VALUES ('1', '张磊老师'), ('2', '李平老师'), ('3', '刘海燕老师'), ('4', '朱云海老师'), ('5', '李杰老师');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
==================================================================================================================================================================

导入数据的方法：从init.sql文件中导入数据
    #准备表、记录
    mysql> create database db1;
    mysql> use db1;
    mysql> source /root/init.sql






作业：
1、查询所有的课程的名称以及对应的任课老师姓名

SELECT course.cname,teacher.tname from course INNER JOIN teacher where course.teacher_id = teacher.tid;

2、查询学生表中男女生各有多少人

select CONCAT(gender,"=>:",COUNT(sid))  total from student GROUP BY gender；

3、查询物理成绩等于100的学生的姓名
SELECT student.sname,score.num FROM student INNER JOIN score WHERE score.num = 100 and score.course_id = (SELECT cid FROM course WHERE cname = '物理') and student.sid = score.student_id;

4、查询平均成绩大于八十分的同学的姓名和平均成绩
SELECT student.sname,AVG(score.num) as avg_score FROM score INNER JOIN student WHERE student.sid = score.student_id GROUP BY score.student_id HAVING AVG(score.num)>80;

5、查询所有学生的学号，姓名，选课数，总成绩
SELECT student.sid,student.sname,temp1.total_course,temp1.total_score FROM student LEFT JOIN (SELECT student_id,COUNT(course_id) as total_course,SUM(num) as total_score FROM score GROUP BY student_id) as temp1 ON student.sid = temp1.student_id;

6、 查询姓李老师的个数
SELECT COUNT(tid) FROM teacher WHERE tname LIKE '李%'；

7、 查询没有报李平老师课的学生姓名
SELECT student.sname from student WHERE student.sid not in (SELECT DISTINCT student_id FROM score WHERE course_id in(SELECT cid FROM course WHERE  teacher_id = (SELECT tid FROM teacher WHERE tname = '李平老师')))
SELECT course.cid FROM course INNER JOIN teacher ON  course.teacher_id = teacher.tid where teacher.tname = '李平老师'  # 0.010s
SELECT cid FROM course WHERE  teacher_id = (SELECT tid FROM teacher WHERE tname = '李平老师')  #0.008s

8、 查询物理课程比生物课程高的学生的学号
SELECT t1.student_id,t1.num as '物理',t2.num as '生物' FROM(
		SELECT student_id,num FROM score WHERE course_id = ( SELECT cid FROM course WHERE cname = '物理')
) AS t1
INNER JOIN (
	SELECT student_id,num FROM score WHERE course_id = ( SELECT cid FROM course WHERE cname = '生物')
) AS t2 on t1.student_id = t2.student_id where t1.num > t2.num;

9、 查询没有同时选修物理课程和体育课程的学生姓名
SELECT t1.student_id,COUNT(t1.course_id) as course_count FROM (
select student_id,course_id from score where course_id = (SELECT cid FROM course WHERE cname='物理')
UNION
select student_id,course_id from score where course_id = (SELECT cid FROM course WHERE cname='体育')
) as t1  GROUP BY t1.student_id HAVING course_count < 2;

10、查询挂科超过两门(包括两门)的学生姓名和班级
SELECT temp1.sname,class.caption FROM (select class_id,sname  FROM student where  sid in (SELECT student_id FROM score where num <60 HAVING COUNT(student_id) > 1)) as temp1
INNER JOIN class ON
temp1.class_id = class.cid;

-- 11、查询选修了所有课程的学生姓名
SELECT student.sname FROM student INNER JOIN (SELECT student_id,COUNT(course_id) as course_num from score GROUP BY student_id HAVING course_num =(SELECT COUNT(cid) FROM course)) as temp1
ON student.sid = temp1.student_id;

12、查询李平老师教的课程的所有成绩记录

13、查询全部学生都选修了的课程号和课程名

14、查询每门课程被选修的次数

15、查询之选修了一门课程的学生姓名和学号

16、查询所有学生考出的成绩并按从高到低排序（成绩去重）

17、查询平均成绩大于85的学生姓名和平均成绩

18、查询生物成绩不及格的学生姓名和对应生物分数

19、查询在所有选修了李平老师课程的学生中，这些课程(李平老师的课程，不是所有课程)平均成绩最高的学生姓名

20、查询每门课程成绩最好的前两名学生姓名

21、查询不同课程但成绩相同的学号，课程号，成绩

22、查询没学过“叶平”老师课程的学生姓名以及选修的课程名称；

23、查询所有选修了学号为1的同学选修过的一门或者多门课程的同学学号和姓名；

24、任课最多的老师中学生单科成绩最高的学生姓名















